@page "/login"
@using System.Net.Http.Json
@using Rezervasyon.Client.Auth
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthStateProvider
@layout EmptyLayout

<h3>Giriş Yap</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="card">
    <div class="card-body">
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Kullanıcı Adı</label>
                <InputText class="form-control" @bind-Value="loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>
            <div class="form-group mt-2">
                <label>Şifre</label>
                <InputText type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary mt-3">Giriş Yap</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                await localStorage.SetItemAsStringAsync("authToken", result.Token);

                // Auth provider'a kullanıcının giriş yaptığını bildiriyoruz.
                ((CustomAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication(result.Token);

                Navigation.NavigateTo("/"); // Ana sayfaya yönlendir
            }
            else
            {
                errorMessage = "Kullanıcı adı veya şifre hatalı.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "API'ye bağlanırken bir hata oluştu: " + ex.Message;
        }
    }

    // Bu class'lar API'ye gönderilecek ve API'den alınacak JSON verilerini temsil ediyor.
    public class LoginModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Kullanıcı adı zorunludur.")]
        public string Username { get; set; }

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Şifre zorunludur.")]
        public string Password { get; set; }
    }

    public class LoginResult
    {
        // Gelen JSON'daki "token" alanını yakalamak için property adı aynı olmalı.
        public string Token { get; set; }
    }
}